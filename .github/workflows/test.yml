name: Test and Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Quick test job - runs macOS Python 3.9 first to identify version issues
  quick-test:
    name: Quick Test (macOS Python 3.9)
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .[dev,test]

    - name: Run quick tests
      run: |
        # Run a subset of critical tests first
        python -m pytest tests/test_package_integration.py::test_cli_list_json_format -v
        python -m pytest tests/test_cli.py::TestErrorHandling::test_uninitialized_config -v

        # If those pass, run a broader test
        python -m pytest tests/test_package_integration.py -v

  # Full test matrix - only runs after quick-test succeeds
  test:
    name: Full Test Matrix
    needs: quick-test  # This ensures quick-test runs first
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Let all jobs complete even if one fails
      matrix:
        # Reordered to prioritize potential problem combinations
        os: [macos-latest, ubuntu-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        # Exclude the combination we already tested in quick-test
        exclude:
          - os: macos-latest
            python-version: '3.9'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .[dev,test]

    - name: Run code quality checks
      run: |
        # Format check
        python -m black --check src tests

        # Lint check
        python -m flake8 src tests

        # Type check
#        python -m mypy src

    - name: Run tests
      run: |
        python -m pytest --cov=src/tengingarstjori --cov-report=xml --cov-report=term -v

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Test package build
      run: |
        python -m build
        python -m twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import tengingarstjori; print('Import successful')"
        tg --help

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -e .[dev]

    - name: Run security checks
      run: |
        # Check for known security vulnerabilities
        safety check

        # Static security analysis
        bandit -r src/ -f json -o bandit-report.json || true

        # Show bandit results
        bandit -r src/ || true
