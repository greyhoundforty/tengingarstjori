[tools]
python = "3.12"
uv = "latest"

[env]
_.python.venv = { path = ".venv", create = true }
PROJECT_NAME = "{{ config_root | basename }}"
PYTHONPATH = "src"

[tasks."uv:reqs"]
description = "Install dependencies from requirements file"
alias = "uvr"
run = "uv pip install -r requirements.txt"

[tasks."uv:freeze"]
description = "Create requirements.txt from currently installed modules"
alias = "uvf"
run = "uv pip freeze > requirements.txt"

[tasks."uv:install"]
description = "Install pip packages"
alias = "uvi"
run = "uv pip install"

[tasks.info]
description = "Print project information"
run = '''
echo "Project: $PROJECT_NAME"
echo "Virtual Environment: $VIRTUAL_ENV"
echo "Python Path: $PYTHONPATH"
'''

[tasks.setup]
description = "Set up development environment"
depends = ["uv:reqs"]
run = "echo 'Development environment ready!'"

[tasks."test:unit"]
description = "Run unit tests only"
run = "python -m pytest tests/test_models.py tests/test_config_manager.py -v --tb=short"

[tasks."test:cli"]
description = "Run CLI integration tests"
run = "python -m pytest tests/test_cli.py -v --tb=short"

[tasks."test:integration"]
description = "Run integration tests"
run = "python -m pytest tests/ -m integration -v --tb=short"

[tasks."test:fast"]
description = "Run fast tests (exclude slow/integration tests)"
run = "python -m pytest tests/ -m 'not slow and not integration' -v --tb=short"

[tasks."test:slow"]
description = "Run slow/performance tests"
run = "python -m pytest tests/ -m slow -v --tb=short"

[tasks."test:all"]
description = "Run all tests with detailed output"
run = "python -m pytest tests/ -v --tb=long --strict-markers"

[tasks.test]
description = "Run standard test suite (fast tests + basic coverage)"
run = '''
echo "üß™ Running test suite with coverage..."
python -m pytest tests/ -v --tb=short --cov=src --cov-report=term-missing --cov-fail-under=50 2>&1 | tee test_results.log
echo "üìù Test results saved to test_results.log"
'''

[tasks."test:watch"]
description = "Run tests in watch mode"
alias = "tw"
run = "python -m pytest tests/ -v --tb=short -f --no-cov"

[tasks."test:coverage"]
description = "Run tests with comprehensive coverage report"
alias = "tc"
run = '''
echo "üß™ Running comprehensive test coverage analysis..."
python -m pytest tests/ --cov=src --cov-report=html --cov-report=term --cov-report=xml --cov-fail-under=80
echo "üìä Coverage reports generated:"
echo "  - HTML: htmlcov/index.html"
echo "  - XML: coverage.xml"
echo "  - Terminal output above"
'''

[tasks."test:smoke"]
description = "Quick smoke tests for basic functionality"
run = '''
echo "üî• Running smoke tests..."
echo "1. Testing imports..."
python -c "from src.models import SSHConnection; from src.config_manager import SSHConfigManager; from src.cli import cli; print('‚úì All imports successful')"
echo "2. Testing CLI help..."
tg --help > /dev/null && echo "‚úì CLI help working"
echo "3. Testing basic model creation..."
python -c "from src.models import SSHConnection; conn = SSHConnection(name='test', host='example.com', user='testuser'); print('‚úì Model creation working')"
echo "‚úÖ Smoke tests passed!"
'''

[tasks.lint]
description = "Run comprehensive code quality checks"
run = '''
echo "üîç Running comprehensive code quality checks..."
echo "üìù Checking code formatting with Black..."
python -m black --check src/ tests/ || (echo "‚ùå Code formatting issues found. Run 'mise run format' to fix."; exit 1)
echo "‚úÖ Code formatting check passed"

echo "üîç Running Flake8 linting..."
python -m flake8 src/ tests/ --statistics || (echo "‚ùå Linting issues found."; exit 1)
echo "‚úÖ Linting check passed"

echo "üî¨ Running MyPy type checking..."
python -m mypy src/ --ignore-missing-imports || (echo "‚ùå Type checking issues found."; exit 1)
echo "‚úÖ Type checking passed"

echo "üõ°Ô∏è Running security checks..."
if command -v bandit &> /dev/null; then
    python -m bandit -r src/ -f json || (echo "‚ùå Security issues found."; exit 1)
    echo "‚úÖ Security check passed"
else
    echo "‚ö†Ô∏è Bandit not installed, skipping security check"
fi

echo "üéâ All code quality checks passed!"
'''

[tasks."lint:fix"]
description = "Auto-fix linting issues where possible"
run = '''
echo "üîß Auto-fixing code quality issues..."
echo "üìù Formatting code with Black..."
python -m black src/ tests/
echo "üîÑ Sorting imports with isort..."
if command -v isort &> /dev/null; then
    python -m isort src/ tests/
else
    echo "‚ö†Ô∏è isort not installed, skipping import sorting"
fi
echo "‚úÖ Auto-fix complete. Please review changes."
'''

[tasks."fix-format"]
description = "Auto-fix code formatting issues (deprecated - use lint:fix)"
run = "python -m black src/ tests/"

[tasks.format]
description = "Format code with black and isort"
run = '''
echo "üé® Formatting code..."
python -m black src/ tests/
if command -v isort &> /dev/null; then
    python -m isort src/ tests/
else
    echo "‚ö†Ô∏è isort not installed, install with: pip install isort"
fi
echo "‚úÖ Code formatting complete!"
'''

[tasks."dev:install"]
description = "Install package in development mode"
alias = "dev"
run = "pip install -e ."

[tasks."dev:uninstall"]
description = "Uninstall development package"
run = "pip uninstall tengingarstjori -y"

[tasks."tg:init"]
description = "Test: Initialize Tengingarstj√≥ri"
depends = ["dev:install"]
run = "tg init"

[tasks."tg:add"]
description = "Test: Add a test SSH connection"
depends = ["dev:install"]
run = "tg add"

[tasks."tg:list"]
description = "Test: List all SSH connections"
depends = ["dev:install"]
run = "tg list"

[tasks."tg:config"]
description = "Test: Configure Tengingarstj√≥ri settings"
depends = ["dev:install"]
run = "tg config"

[tasks.clean]
description = "Clean up build artifacts and cache"
run = '''
rm -rf build/
rm -rf dist/
rm -rf *.egg-info/
rm -rf .pytest_cache/
rm -rf htmlcov/
rm -rf .coverage
find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
find . -type f -name "*.pyc" -delete
'''

[tasks."clean:full"]
description = "Full clean including virtual environment"
depends = ["clean"]
run = "rm -rf .venv/"

[tasks.build]
description = "Build package for distribution"
run = '''
python -m build
echo "Package built in dist/"
'''

[tasks."install:global"]
description = "Install package globally from current source"
depends = ["build"]
run = '''
echo "üåç Installing Tengingarstj√≥ri globally..."
pip install dist/*.whl --force-reinstall
echo "‚úÖ Tengingarstj√≥ri installed globally as 'tg' command"
echo "‚ÑπÔ∏è Test with: tg --version"
'''

[tasks."tg:fix"]
description = "Test: Fix corrupted SSH configuration"
depends = ["dev:install"]
run = "tg fix-config"

[tasks."tg:refresh"]
description = "Test: Refresh SSH configuration"
depends = ["dev:install"]
run = "tg refresh"

[tasks."pre-commit"]
description = "Run comprehensive tests before committing"
run = "chmod +x scripts/test-before-commit.sh && scripts/test-before-commit.sh"

[tasks.validate]
description = "Run complete validation suite (lint + test + smoke)"
run = '''
echo "üèÅ Running complete validation suite..."
echo ""
echo "Phase 1: Code Quality Checks"
echo "============================="
mise run lint
echo ""
echo "Phase 2: Smoke Tests"
echo "===================="
mise run test:smoke
echo ""
echo "Phase 3: Unit Tests"
echo "==================="
mise run test:unit
echo ""
echo "Phase 4: Integration Tests"
echo "=========================="
if [ -f "tests/test_cli.py" ]; then
    mise run test:cli
else
    echo "‚ö†Ô∏è CLI tests not found, skipping"
fi
echo ""
echo "üéÜ Validation complete! Ready for commit/deploy."
'''

[tasks."validate:quick"]
description = "Quick validation (format check + smoke test)"
run = '''
echo "‚ö° Running quick validation..."
python -m black --check src/ tests/ && echo "‚úÖ Format check passed"
mise run test:smoke
echo "‚úÖ Quick validation complete!"
'''

[tasks.demo]
description = "Run a demo of the SSH connection manager"
depends = ["dev:install"]
run = '''
echo "üéØ Tengingarstj√≥ri Demo"
echo "====================="
echo ""
echo "1. Checking installation..."
tg --version
echo ""
echo "2. Available commands:"
tg --help
echo ""
echo "3. To start using:"
echo "   tg init    # Set up SSH integration"
echo "   tg add     # Add SSH connections"
echo "   tg list    # View connections"
echo ""
echo "4. Development commands:"
echo "   mise run test        # Run tests with coverage"
echo "   mise run lint        # Check code quality"
echo "   mise run validate    # Full validation suite"
echo "   mise run format      # Format code"
'''
